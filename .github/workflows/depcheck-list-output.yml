name: Check Unused Dependencies (List)
on:
  workflow_dispatch:

env:
  NODE_VERSION: 16.x
  PACKAGE_DIRS: ". ./client ./server"
  DEPENDENCY_TRACK_API_KEY: ${{ secrets.DEPENDENCYTRACK_APIKEY }}
  DEPENDENCY_TRACK_BASE_URL: "https://5f3a-62-90-190-70.ngrok-free.app"
  PROJECT_NAME: "Testing Dep-Track Workflow"  # Replace with repo name later

jobs:
  code_analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Dependencies
        run: |
          for dir in ${{ env.PACKAGE_DIRS }}; do
            echo "Installing dependencies in $dir"
            cd "$dir" || exit
            npm install
            cd - || exit
          done
        shell: bash

      - name: Run Depcheck and Write to List
        run: |
          echo "Unused Dependencies:" > unused_dependencies.txt
          for dir in ${{ env.PACKAGE_DIRS }}; do
            echo "Running depcheck in $dir..."
            cd "$dir" || exit
            output=$(npx depcheck || true)
      
            # Parse and annotate unused dependencies
            if echo "$output" | grep -q "Unused dependencies"; then
              echo "$output" | sed -n '/Unused dependencies/,$p' | while IFS= read -r line; do
                if [[ $line == "*"* ]]; then
                  dep=$(echo "$line" | sed -E 's/\* //; s/:.*$//')
                  echo "$dep" >> ../unused_dependencies.txt
                fi
              done
            fi

            # Parse and annotate unused devDependencies
            if echo "$output" | grep -q "Unused devDependencies"; then
              echo "$output" | sed -n '/Unused devDependencies/,$p' | while IFS= read -r line; do
                if [[ $line == "*"* ]]; then
                  dep=$(echo "$line" | sed -E 's/\* //; s/:.*$//')
                  echo "$dep" >> ../unused_dependencies.txt
                fi
              done
            fi
            cd - || exit
          done
          cat unused_dependencies.txt
      
      - name: Install Trivy for SBOM Generation
        run: |
          curl -sSL https://github.com/aquasecurity/trivy/releases/download/v0.58.0/trivy_0.58.0_Linux-64bit.tar.gz | sudo tar xz -C /usr/local/bin

#          curl -sSL https://github.com/anchore/syft/releases/download/v1.17.0/syft_1.17.0_linux_amd64.tar.gz | tar xz -C /usr/local/bin syft

      - name: Generate SBOM using Trivy
        run: |
          trivy fs --format cyclonedx --output sbom.json .
#          syft . --output cyclonedx-json=sbom.json
      - name: Remove Unused Dependencies from SBOM
        run: |
          echo "Removing unused dependencies from SBOM"
    
          # Read unused dependencies into a list
          unused_deps=$(cat unused_dependencies.txt)
    
          # Convert the list into a JSON array of objects with `group` and `name`
          unused_json=$(echo "$unused_deps" | jq -R -s '
            split("\n") | 
            map(select(length > 0)) |
            map(if test("^@") then 
                  {group: (split("/")[0]), name: (split("/")[1])} 
                else 
                  {group: null, name: .} 
                end)
          ')

          # Filter components, matching against both `group` and `name`
          jq --argjson unused "$unused_json" '
            .components |= map(select(
              .name as $name | 
              .group as $group |
              ($unused | map(.name == $name and .group == $group) | any) | not
            ))
          ' sbom.json > filtered_sbom.json

      
#      - name: Upload Unused Dependencies
#        uses: actions/upload-artifact@v3
#        with:
#          name: filtered-sbom-json
#          path: filtered_sbom.json

   #   - name: Upload SBOM to Dependency Track
   #     uses: DependencyTrack/gh-upload-sbom@v3
   #     with:
   #       serverHostname: ${{ env.DEPENDENCY_TRACK_BASE_URL }}
   #       apiKey: ${{ env.DEPENDENCY_TRACK_API_KEY }}
   #       projectName: ${{ env.PROJECT_NAME }} # change projectName -> to repo_name
   #       projectVersion: '1.0.0'
   #       bomFilename: "./filtered_sbom.json" # Adjust path if needed
   #       autoCreate: true
      - name: Upload SBOM to Dependency Track
        id: SBOM-upload
        run: |
          curl -X "POST" "${{ env.DEPENDENCY_TRACK_BASE_URL }}/api/v1/bom" \
               -H 'Content-Type: multipart/form-data' \
               -H "X-Api-Key: ${{ env.DEPENDENCY_TRACK_API_KEY }}" \
               -F "autoCreate=true" \
               -F "projectName=${{ env.PROJECT_NAME }}" \
               -F "projectVersion=1.0.0" \
               -F "bom=@./filtered_sbom.json"
      
      - name: Fetch Project ID
        id: fetch-project
        run: |
          project_id=$(curl -s -H "X-Api-Key: ${{ env.DEPENDENCY_TRACK_API_KEY }}" \
          "${{ env.DEPENDENCY_TRACK_BASE_URL }}/api/v1/project" | jq -r '.[] | select(.name == "${{ env.PROJECT_NAME }}") | .uuid')
          echo "Project ID: $project_id"
          echo "project_id=$project_id" >> $GITHUB_ENV

      - name: Fetch EPSS Data
        id: fetch-epss
        run: |
          curl -s -H "X-Api-Key: ${{ env.DEPENDENCY_TRACK_API_KEY }}" \
          "${{ env.DEPENDENCY_TRACK_BASE_URL }}/api/v1/finding/project/$project_id" \
          -H "Accept: application/sarif+json" \
          -o epss.sarif
          echo "EPSS data fetched successfully."

      - name: Upload EPSS Data as SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          token: ${{ secrets.PAT }}
          sarif_file: epss.sarif # sarif_file: ${{ steps.fetch-project.outputs.epss }}
