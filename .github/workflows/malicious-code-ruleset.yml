#name: Semgrep Scan
#on: [pull_request]

#jobs:
  #semgrep:
    #runs-on: ubuntu-latest
    #steps:
      #- name: Checkout code
        #uses: actions/checkout@v3

      #- name: Install Semgrep
        #run: pip install semgrep

      #- name: Clone malicious-code-ruleset
        #run: git clone https://github.com/apiiro/malicious-code-ruleset.git

      #- name: Run Semgrep with Ruleset
        #run: semgrep --config=malicious-code-ruleset --error
name: Semgrep Scan
on: [pull_request]
jobs:
  semgrep:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Install Semgrep
        run: pip install semgrep
      
      - name: Clone malicious-code-ruleset
        run: git clone https://github.com/apiiro/malicious-code-ruleset.git
      
      - name: Run Semgrep with Ruleset and Output SARIF
        run: semgrep --config=malicious-code-ruleset --sarif --output=semgrep-results.sarif
      
      - name: Upload SARIF Report to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
      
      - name: Generate Clickable Findings
        id: generate-findings
        run: |
          echo "Generating clickable findings report..."
          python3 <<EOF
          import json
          import os
          
          # GitHub repository information
          repo = os.environ['GITHUB_REPOSITORY']
          base_url = f"https://github.com/{repo}"
          pr_head_sha = os.environ.get('GITHUB_PR_HEAD_SHA')
          
          try:
              with open('semgrep-results.sarif', 'r') as f:
                  sarif_data = json.load(f)
              
              findings = []
              
              if 'runs' in sarif_data:
                  for run in sarif_data['runs']:
                      if 'results' in run:
                          for result in run['results']:
                              message = result.get('message', {}).get('text', 'No message provided')
                              rule_id = result.get('ruleId', 'Unknown rule')
                              severity = 'Unknown'
                              
                              # Extract severity
                              if 'properties' in result and 'severity' in result['properties']:
                                  severity = result['properties']['severity']
                              elif 'tags' in result:
                                  for tag in result['tags']:
                                      if tag.startswith('severity:'):
                                          severity = tag.split(':')[1]
                              
                              # Get location info
                              location = result.get('locations', [{}])[0]
                              file_path = location.get('physicalLocation', {}).get('artifactLocation', {}).get('uri', 'Unknown file')
                              
                              region = location.get('physicalLocation', {}).get('region', {})
                              start_line = region.get('startLine', 0)
                              end_line = region.get('endLine', start_line)
                              
                              # Try to get code snippet
                              snippet = None
                              try:
                                  if os.path.exists(file_path):
                                      with open(file_path, 'r') as code_file:
                                          lines = code_file.readlines()
                                          start_idx = max(0, start_line - 3)
                                          end_idx = min(len(lines), end_line + 2)
                                          snippet = ''.join(lines[start_idx:end_idx])
                              except Exception as e:
                                  print(f"Error getting snippet: {e}")
                                  snippet = None
                              
                              findings.append({
                                  'rule_id': rule_id,
                                  'message': message,
                                  'severity': severity,
                                  'file_path': file_path,
                                  'start_line': start_line,
                                  'end_line': end_line,
                                  'snippet': snippet
                              })
              
              # Write findings to a markdown file
              with open('findings.md', 'w') as f:
                  f.write('## Semgrep Security Scan Results\n\n')
                  
                  if findings:
                      f.write(f'Found {len(findings)} potential security issues:\n\n')
                      
                      for i, finding in enumerate(findings, 1):
                          # Select emoji based on severity
                          if finding['severity'].upper() in ['ERROR', 'HIGH']:
                              emoji = 'üî¥'
                          elif finding['severity'].upper() in ['WARNING', 'MEDIUM']:
                              emoji = 'üü†'
                          else:
                              emoji = 'üü°'
                          
                          f.write(f"### {emoji} Issue #{i}: {finding['rule_id']} ({finding['severity']})\n\n")
                          
                          # Create clickable link
                          file_path = finding['file_path']
                          start_line = finding['start_line']
                          
                          if file_path != 'Unknown file' and start_line > 0 and pr_head_sha:
                              file_link = f"{base_url}/blob/{pr_head_sha}/{file_path}#L{start_line}"
                              f.write(f"**File:** [{file_path}]({file_link}) (Lines {start_line}-{finding['end_line']})\n\n")
                          else:
                              f.write(f"**File:** {file_path} (Lines {start_line}-{finding['end_line']})\n\n")
                          
                          f.write(f"**Message:** {finding['message']}\n\n")
                          
                          # Include code snippet in collapsible section
                          if finding['snippet']:
                              f.write("<details>\n")
                              f.write("<summary>Show code snippet</summary>\n\n")
                              f.write("```\n")
                              f.write(finding['snippet'])
                              f.write("\n```\n")
                              f.write("</details>\n\n")
                          
                          f.write("---\n\n")
                  else:
                      f.write('‚úÖ No security issues found! Great job!\n')
              
              print("Findings report generated successfully")
          except Exception as e:
              print(f"Error generating findings: {e}")
              with open('findings.md', 'w') as f:
                  f.write('## Semgrep Security Scan Results\n\n')
                  f.write(f'‚ö†Ô∏è Error processing scan results: {e}\n')
          EOF
      
      - name: Comment on Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const prNumber = context.issue.number;
            
            try {
              // Read the findings markdown
              const commentBody = fs.readFileSync('findings.md', 'utf8');
              
              // Post as comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
              
              console.log("Comment posted successfully");
            } catch (error) {
              console.error("Error posting comment:", error);
              core.setFailed(`Error posting comment: ${error.message}`);
            }
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_PR_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
