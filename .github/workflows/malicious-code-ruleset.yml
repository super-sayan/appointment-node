#name: Semgrep Scan
#on: [pull_request]

#jobs:
  #semgrep:
    #runs-on: ubuntu-latest
    #steps:
      #- name: Checkout code
        #uses: actions/checkout@v3

      #- name: Install Semgrep
        #run: pip install semgrep

      #- name: Clone malicious-code-ruleset
        #run: git clone https://github.com/apiiro/malicious-code-ruleset.git

      #- name: Run Semgrep with Ruleset
        #run: semgrep --config=malicious-code-ruleset --error
name: Semgrep Scan
on: [pull_request]
jobs:
  semgrep:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Install Semgrep
        run: pip install semgrep
      
      - name: Clone malicious-code-ruleset
        run: git clone https://github.com/apiiro/malicious-code-ruleset.git
      
      - name: Run Semgrep with Ruleset and Output SARIF
        run: semgrep --config=malicious-code-ruleset --sarif --output=semgrep-results.sarif
      
      - name: Upload SARIF Report to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
      
      - name: Process Semgrep Results
        id: process-results
        run: |
          # Create a file with the comment content
          python3 -c "
          import json
          import os
          
          with open('semgrep-results.sarif', 'r') as f:
              sarif_data = json.load(f)
          
          findings = []
          
          if 'runs' in sarif_data:
              for run in sarif_data['runs']:
                  if 'results' in run:
                      for result in run['results']:
                          message = result.get('message', {}).get('text', 'No message provided')
                          rule_id = result.get('ruleId', 'Unknown rule')
                          severity = 'Unknown'
                          
                          # Try to extract severity from tags or properties
                          if 'properties' in result and 'severity' in result['properties']:
                              severity = result['properties']['severity']
                          elif 'tags' in result:
                              for tag in result['tags']:
                                  if tag.startswith('severity:'):
                                      severity = tag.split(':')[1]
                          
                          # Get location info
                          location = result.get('locations', [{}])[0]
                          file_path = location.get('physicalLocation', {}).get('artifactLocation', {}).get('uri', 'Unknown file')
                          
                          region = location.get('physicalLocation', {}).get('region', {})
                          start_line = region.get('startLine', 0)
                          end_line = region.get('endLine', start_line)
                          
                          # Create formatted finding
                          finding = {
                              'rule_id': rule_id,
                              'message': message,
                              'severity': severity,
                              'file_path': file_path,
                              'start_line': start_line,
                              'end_line': end_line
                          }
                          findings.append(finding)
          
          # Create the comment content
          with open('comment.md', 'w') as f:
              f.write('## Semgrep Security Scan Results\n\n')
              
              if findings:
                  f.write(f'Found {len(findings)} potential security issues:\n\n')
                  
                  for i, finding in enumerate(findings, 1):
                      emoji = 'ðŸ”´' if finding['severity'].upper() in ['ERROR', 'HIGH'] else 'ðŸŸ ' if finding['severity'].upper() in ['WARNING', 'MEDIUM'] else 'ðŸŸ¡'
                      f.write(f'{emoji} **{finding[\"rule_id\"]}** ({finding[\"severity\"]})\n')
                      f.write(f'- File: `{finding[\"file_path\"]}`\n')
                      f.write(f'- Lines: {finding[\"start_line\"]}-{finding[\"end_line\"]}\n')
                      f.write(f'- Message: {finding[\"message\"]}\n\n')
              else:
                  f.write('âœ… No security issues found! Great job!\n')
          
          # Set has_findings flag for GitHub Actions
          has_findings = 'true' if findings else 'false'
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f'has_findings={has_findings}\n')
          "
      
      - name: Comment on Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const prNumber = context.issue.number;
            
            // Read the comment content from file
            const commentBody = fs.readFileSync('comment.md', 'utf8');
            
            // Create a comment on the PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });
