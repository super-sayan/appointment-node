name: Find Unused Dependencies
on:
  workflow_dispatch:

env:
  NODE_VERSION: 16.x
#  PACKAGE_DIRS: ". ./client ./server"

jobs:
  depcheck_with_alerts:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
        
      - name: Find package.json Files
        id: locate-package-json
        run: |
          # Find all directories containing package.json
          find . -name "package.json" -exec dirname {} \; > package_dirs.txt

          # Export as a reusable list
          PACKAGE_DIRS=$(cat package_dirs.txt | tr '\n' ' ')
          echo "Found directories: $PACKAGE_DIRS"
          echo "PACKAGE_DIRS=$PACKAGE_DIRS" >> $GITHUB_ENV

      # Install dependencies from all located package.json files
      - name: Install Dependencies
        run: |
          for dir in ${{ env.PACKAGE_DIRS }}; do
            echo "Installing dependencies in $dir"
            cd "$dir" || exit
            npm install
            cd - || exit
          done
        shell: bash 

      # Running Dependecy Check to define unused dependencies and create txt of unused deps.
      - name: Run Depcheck and Write to List
        run: |
          echo "Unused Dependencies:" > unused_dependencies.txt
          for dir in ${{ env.PACKAGE_DIRS }}; do
            echo "Running depcheck in $dir..."
            cd "$dir" || exit
            output=$(npx depcheck || true)
      
            # Parse and annotate unused dependencies.
            if echo "$output" | grep -q "Unused dependencies"; then
              echo "$output" | sed -n '/Unused dependencies/,$p' | while IFS= read -r line; do
                if [[ $line == "*"* ]]; then
                  dep=$(echo "$line" | sed -E 's/\* //; s/:.*$//')
                  echo "$dep" >> ../unused_dependencies.txt
                fi
              done
            fi

            # Parse and annotate unused devDependencies.
            if echo "$output" | grep -q "Unused devDependencies"; then
              echo "$output" | sed -n '/Unused devDependencies/,$p' | while IFS= read -r line; do
                if [[ $line == "*"* ]]; then
                  dep=$(echo "$line" | sed -E 's/\* //; s/:.*$//')
                  echo "$dep" >> ../unused_dependencies.txt
                fi
              done
            fi
            cd - || exit
          done
          cat unused_dependencies.txt
        
     # Uploading SBOM to Dependency Track for analysis.   
   #   - name: Upload SBOM to Dependency Track
   #     id: SBOM-upload
   #     run: |
   #       curl -X "POST" "${{ env.DEPENDENCY_TRACK_BASE_URL }}/api/v1/bom" \
   #            -H 'Content-Type: multipart/form-data' \
   #            -H "X-Api-Key: ${{ env.DEPENDENCY_TRACK_API_KEY }}" \
   #            -F "autoCreate=true" \
   #            -F "projectName=${{ env.PROJECT_NAME }}" \
   #            -F "projectVersion=1.0.0" \
   #            -F "bom=@./filtered_sbom.json"

   
# Action for downloading json/sarif result files for errors handling.      
#      - name: Download Results Dependencies
#        uses: actions/upload-artifact@v3
#        with:
#          name: epss-json
#          path: epss.json  

 
      # This code is used to create issues from epps.json results file if we won't succeed in  finding solution for uploading results to security tab.
      # - name: Parse JSON and create issues
      #   run: |
      #     # Install jq for JSON parsing
      #     sudo apt-get install jq

      #     # Parse JSON file and create issues via GitHub API
      #     cat epss.json | jq -c '.[]' | while read -r item; do
      #       vuln_id=$(echo $item | jq -r '.vulnerability.vulnId')
      #       description=$(echo $item | jq -r '.vulnerability.description')
      #       severity=$(echo $item | jq -r '.vulnerability.severity')
      #       epss_score=$(echo $item | jq -r '.vulnerability.epssScore')
      #       component_name=$(echo $item | jq -r '.component.name')
      #       component_version=$(echo $item | jq -r '.component.version')

      #       # Determine EPSS Level
      #       if (( $(echo "$epss_score > 0.5" | bc -l) )); then
      #         epss_level="High EPSS"
      #       elif (( $(echo "$epss_score > 0.2" | bc -l) )); then
      #         epss_level="Medium EPSS"
      #       else
      #         epss_level="Low EPSS"
      #       fi

      #       # Ensure unique issue title by appending the vulnerability ID
      #       title="Vulnerability - $vuln_id ($component_name $component_version)"

      #       # Issue Body: Includes description, severity, and EPSS information
      #       body="**Vulnerability ID**: $vuln_id\n\n**Description**: $description\n\n**Severity**: $severity\n\n**EPSS Score**: $epss_score ($epss_level)"

      #       # Create issue using GitHub API
      #       curl -X POST \
      #         -H "Authorization: token ${{ secrets.PAT }}" \
      #         -d '{"title": "'"$title"'", "body": "'"$body"'", "labels": ["security", "'"$severity"'", "'"$epss_level"'"]}' \
      #         https://api.github.com/repos/${{ github.repository }}/issues
      #     done
